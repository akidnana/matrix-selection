k<-dim(dataIGI)[1]-1
knn <- knearneigh(coords,k)
knn_nb <- knn2nb(knn)
dlist <- nbdists(knn_nb, coords,longlat = TRUE)
indis <- function(x) 1/(x^4)
dlist <- lapply(dlist, indis)
bobot1 <- nb2listw(knn_nb, glist=dlist, style="B", zero.policy=T)
#mengembalikan ke bentuk matriks
bobot1_mat <- listw2mat(bobot1)
#mengalikan matriks knn dengan tpt
bobot_custom <- w_tpt*bobot1_mat
b_cust_tot<-rowSums(bobot_custom,na.rm = TRUE)
bobot_custom<-bobot_custom/b_cust_tot
#mengubah ke bentuk listw
w_final <- mat2listw(bobot_custom,style = "W")
k<-dim(dataIGI)[1]-1
get.list=function(coords,k,indist)
{
#mengambil k tetangga terdekat
nb <- knn2nb(knearneigh(coords, k=k),sym=T )
#menentukan jarak ke masing2 tetangga
jarak <- nbdists(nb, coords,longlat = TRUE)
#menerapkan inverse distance
jarak <- lapply(jarak,indist)
#membuat list dengan matriks ketetanggaan jarak inverse
w_jarak <- nb2listw(nb, glist=jarak, style="B", zero.policy=T)
#mengembalikan ke bentuk matriks
w_jarak <- listw2mat(w_jarak)
#mengalikan matriks knn dengan tpt
m_cust <- w_tpt*w_jarak
m_cust_tot<-rowSums(m_cust,na.rm = TRUE)
m_custom<-m_cust/m_cust_tot
#mengubah ke bentuk listw
w_custom <- mat2listw(m_custom)
}
create.instr=function(vy,vx,w_custom){
ly <- lag.listw(w_custom,vy)
res <- matrix(data = NA, nrow = nrow(vx), ncol = ncol(vx))
for (i in 1:ncol(vx))
{
res[ ,i]=  lag.listw(w_custom,vx[,i])
}
instr=lm(ly~ res)$fitted.values
instr
}
#sekuens untuk power invers distance
degs <- seq(from = 0.4, to = 4,by=0.1)
#membuat list berisi sequence
funs <- as.list(rep(NA,length(degs)))
#fungsi jarak invers dengan power tertentu
for(i in 1:length(degs))
{
funs[[i]]=function(x) 1/(x^degs[i])
}
res<-matrix(NA,length(vy),length(funs))
X <- vx
for(i in 1:length(funs))
{
#a1 sebagai fungsi invers jarak
a1 <- funs[[i]]
#a untuk membentuk matriks pembobot
a <- get.list(coords,k=k,a1)
#menghitung fitted values model pada masing2 matriks pembobot
b <- create.instr(vy,vx,a)
names(b)=NULL
res[,i]=b
}
mn <- paste("s5_w",degs,sep="")
res <- data.frame(res)
names(res) <- mn
res <- as.matrix(res)
X <- cbind(X,res)
#X <- res
X1<-X[,-(1:5)]
n = nrow(X1)
#jumlah kombinasi matriks pembobot
#X berisi matriks dengan baris berupa wilayah dan kolom berupa macam2 matriks pembobot dengan elemen matriks berupa fitted values yang dihasilkan oleh model spatial lag
#save(X1,vy,n, file="d:/Skripsweet/Bimbingan 10/IGI_jateng.w5.Rdata")
#load("d:/Skripsweet/Bimbingan 10/IGI_jateng.w5.Rdata")
#jateng_w<-get(load("d:/Skripsweet/Bimbingan 10/IGI_jateng.w5.Rdata"))
save(X1,vy,n, file="d:/Skripsweet/Bimbingan 10/IGI_jateng.w5.Rdata")
jateng_w<-get(load("d:/Skripsweet/Bimbingan 10/IGI_jateng.w5.Rdata"))
jat_w_mat<-as.matrix(jateng_w)
library(mboost)
#v 0.1
m1=glmboost(jat_w_mat,vy,control = boost_control(mstop = 1000,nu=0.1),center = FALSE)
aic1 <- AIC(m1,method="corrected")
aic1
mbest1aic=m1[mstop(aic1)]
names(coef(mbest1aic)[abs(coef(mbest1aic)) > 0])
mstop(aic1)
mstop(gMDL1)
gMDL1 <- AIC(m1,method="gMDL")
gMDL1
mbest1gMDL=m1[mstop(gMDL1)]
names(coef(mbest1gMDL)[abs(coef(mbest1gMDL)) > 0])
mstop(gMDL1)
#load spdep package
library (spdep)
data(boston)
attach (boston.c)
my=log(MEDV)
mx=cbind(CRIM , ZN , INDUS , CHAS , I(NOX^2) , I(RM^2) , AGE , log(DIS) , log(RAD) , TAX , PTRATIO , B , log(LSTAT))
dimnames(mx)[[2]] <- c("CRIM",    "ZN" ,     "INDUS" ,  "CHAS" ,   "NOX^2" ,       "RM^2"  ,      "AGE" ,
"log(DIS)",        "log(RAD)" ,       "TAX" ,    "PTRATIO", "B",       "log(LSTAT)"  )
coords=cbind(LON,LAT)
detach(boston.c)
###############################################################################
get.list=function(coords,k,ws)
{
my.nb=knn2nb(knearneigh(coords, k=k),sym=T )
dlist <- nbdists(my.nb, coords)
dlist <- lapply(dlist, ws)
wlist<-nb2listw(my.nb, glist=dlist, style="W", zero.policy=T)
wlist
}
create.instr=function(my,mx,wlist){
ly= lag.listw(wlist,my)
res=matrix(data = NA, nrow = nrow(mx), ncol = ncol(mx))
for (i in 1:ncol(mx))
{
res[ ,i]=  lag.listw(wlist,mx[,i])
}
instr=lm(ly~ res)$fitted.values
instr
}
degs=seq(from = 0.4, to = 4,by=0.1)
funs=as.list(rep(NA,length(degs)))
for(i in 1:length(degs))
{
funs[[i]]=function(x) 1/(x^degs[i])
}
res=matrix(NA,length(my),length(funs))
X=mx
#set the initial such matrix
#put a smalll number
#50 adalah jumlah maksimal tetangga
n=51
for(J in 1:(n-1))
{
for(i in 1:length(funs))
{
a1 <-funs[[i]]
a<- get.list(coords,k=J,a1)
b<-create.instr(my,mx,a)
names(b)=NULL
res[,i]=b
}
mn=paste("n",J,"w",degs,sep="")
res=data.frame(res)
names(res)= mn
res=as.matrix(res)
X=cbind(X,res)
}
###############################################################################
###############################################################################
load("d:/RDATA/boston.w.Rdata")
bostonw<-get(load("d:/RDATA/boston.w.Rdata"))
n =nrow(X)
k = 10
ntest <- floor(n / k)
cv10f <- matrix(c(rep(c(rep(0, ntest), rep(1, n)), k - 1), rep(0, n * k - (k - 1) * (n + ntest))), nrow = n)
k = 8
ntest <- floor(n / k)
cv8f <- matrix(c(rep(c(rep(0, ntest), rep(1, n)), k - 1), rep(0, n * k - (k - 1) * (n + ntest))), nrow = n)
set.seed(290875)
bs25 <- rmultinom(25, n, rep(1, n)/n)
bs100 <- rmultinom(100, n, rep(1, n)/n)
library(mboost)
m1=glmboost(X,my,  control = boost_control(mstop = 10000,nu=0.3),center = FALSE)
aic <- AIC(m1,method="corrected")
aic
mbest=m1[mstop(aic)]
mstop(aic)
gMDL <- AIC(m1,method="gMDL")
gMDL
mbest=m1[mstop(gMDL)]
mstop(gMDL)
### a simple two-dimensional example: cars data
cars.gb <- glmboost(dist ~ speed, data = cars,
control = boost_control(mstop = 2000),
center = FALSE)
cars.gb
### initial number of boosting iterations
mstop(cars.gb)
### AIC criterion
aic <- AIC(cars.gb, method = "corrected")
aic
mstop(aic)
### extract coefficients for glmboost
coef(cars.gb)
coef(cars.gb, off2int = TRUE)        # offset added to intercept
coef(lm(dist ~ speed, data = cars))  # directly comparable
bostonw<-get(load("d:/RDATA/boston.w.Rdata"))
n =nrow(X)
k = 10
ntest <- floor(n / k)
cv10f <- matrix(c(rep(c(rep(0, ntest), rep(1, n)), k - 1), rep(0, n * k - (k - 1) * (n + ntest))), nrow = n)
k = 8
ntest <- floor(n / k)
cv8f <- matrix(c(rep(c(rep(0, ntest), rep(1, n)), k - 1), rep(0, n * k - (k - 1) * (n + ntest))), nrow = n)
set.seed(290875)
bs25 <- rmultinom(25, n, rep(1, n)/n)
bs100 <- rmultinom(100, n, rep(1, n)/n)
library(mboost)
library (spdep)
data(boston)
attach (boston.c)
my=log(MEDV)
mx=cbind(CRIM , ZN , INDUS , CHAS , I(NOX^2) , I(RM^2) , AGE , log(DIS) , log(RAD) , TAX , PTRATIO , B , log(LSTAT))
dimnames(mx)[[2]] <- c("CRIM",    "ZN" ,     "INDUS" ,  "CHAS" ,   "NOX^2" ,       "RM^2"  ,      "AGE" ,
"log(DIS)",        "log(RAD)" ,       "TAX" ,    "PTRATIO", "B",       "log(LSTAT)"  )
coords=cbind(LON,LAT)
detach(boston.c)
bostonw<-get(load("d:/RDATA/boston.w.Rdata"))
m1=glmboost(bostonw, my,  control = boost_control(mstop = 10000,nu=0.3),center = FALSE)
View(cars)
coef(m1)
k<-dim(dataIGI)[1]-1
### datafix  ###
dataIGI <- read.csv("D:/Skripsweet/Kak Along's/datafix.csv")
rownames(dataIGI)  <- dataIGI$KABUPATEN
attach(dataIGI)
### Penimbang ###
Penimbang <- read.csv("D:/Skripsweet/Kak Along's/customized_queen.csv")
colnames(Penimbang) <- dataIGI$KABUPATEN
rownames(Penimbang) <- dataIGI$KABUPATEN
w_penimbang <- as.matrix(Penimbang)
w_penimbang <- mat2listw(w_penimbang, style = "W")
#Regresi OLS & uji asumsi klasik
r.ols <- lm(dataIGI$IGI ~ dataIGI$INFLASI+dataIGI$PMTB+dataIGI$UMK+dataIGI$PPS+dataIGI$PP)
summary(r.ols)
library(spdep)
dataIGI <- read.csv("D:/Skripsweet/data_jateng_w_latlong.csv")
rownames(dataIGI) <- dataIGI$KABUPATEN
attach(dataIGI)
vy <- IGI
vx <- dataIGI[,4:8]
coords <- cbind(x_long,y_lat)
detach(dataIGI)
tpt <- read.csv("D:/Skripsweet/Kak Along's/Matriks_TPT_inv.csv")
w_tpt <- as.matrix(tpt)
k<-dim(dataIGI)[1]-1
knn <- knearneigh(coords,k)
knn_nb <- knn2nb(knn)
dlist <- nbdists(knn_nb, coords,longlat = TRUE)
indis <- function(x) 1/(x^4)
dlist <- lapply(dlist, indis)
bobot1 <- nb2listw(knn_nb, glist=dlist, style="B", zero.policy=T)
#mengembalikan ke bentuk matriks
bobot1_mat <- listw2mat(bobot1)
#mengalikan matriks knn dengan tpt
bobot_custom <- w_tpt*bobot1_mat
b_cust_tot<-rowSums(bobot_custom,na.rm = TRUE)
bobot_custom<-bobot_custom/b_cust_tot
#mengubah ke bentuk listw
w_final <- mat2listw(bobot_custom,style = "W")
my<- dataIGI$IGI
mx<-cbind(dataIGI$INFLASI,dataIGI$PMTB,dataIGI$UMK,dataIGI$PP,dataIGI$PPS)
ols<-lm(my~mx)
summary(ols)
?lagsarlm
library(spatialreg)
?lagsarlm
moran.test(ols$residuals,w_final,randomisation = TRUE)
moran.test(ols$residuals,w_final,randomisation = TRUE,alternative = two.sided)
moran.test(ols$residuals,w_final,randomisation = TRUE,alternative = "two.sided")
moran.test(dataIGI$IGI,w_final,randomisation = TRUE,alternative = "two.sided")
moran.test(dataIGI$IGI,w_final,randomisation = TRUE)
?moran.test
library(spdep)
dataIGI <- read.csv("D:/Skripsweet/data_jateng_w_latlong.csv")
rownames(dataIGI) <- dataIGI$KABUPATEN
attach(dataIGI)
vy <- IGI
vx <- dataIGI[,4:8]
coords <- cbind(x_long,y_lat)
detach(dataIGI)
tpt <- read.csv("D:/Skripsweet/Kak Along's/Matriks_TPT_inv.csv")
w_tpt <- as.matrix(tpt)
k<-dim(dataIGI)[1]-1
knn <- knearneigh(coords,k)
knn_nb <- knn2nb(knn)
dlist <- nbdists(knn_nb, coords,longlat = TRUE)
indis <- function(x) 1/(x^4)
dlist <- lapply(dlist, indis)
bobot1 <- nb2listw(knn_nb, glist=dlist, style="B", zero.policy=T)
#mengembalikan ke bentuk matriks
bobot1_mat <- listw2mat(bobot1)
#mengalikan matriks knn dengan tpt
bobot_custom <- w_tpt*bobot1_mat
b_cust_tot<-rowSums(bobot_custom,na.rm = TRUE)
bobot_custom<-bobot_custom/b_cust_tot
#mengubah ke bentuk listw
w_final <- mat2listw(bobot_custom,style = "W")
r.ols <- lm(dataIGI$IGI ~ dataIGI$INFLASI+dataIGI$PMTB+dataIGI$UMK+dataIGI$PPS+dataIGI$PP)
r.lag <- lagsarlm(r.ols, dataIGI, w_final, zero.policy = TRUE)
r.lag <- lagsarlm(r.ols, dataIGI, w_final, zero.policy = TRUE,Durbin = TRUE)
summary(r.lag)
shiny::runApp('D:/Skripsweet/Shiny/Pemilihan___Matrix')
install.packages("spseml")
install.packages("spse")
install.packages("spse", repos="http://R-Forge.R-project.org")
install.packages("tis")
install.packages("Ecfun")
install.packages("Ecdat")
install.packages("spse", repos="http://R-Forge.R-project.org")
knitr::opts_chunk$set(echo = TRUE)
library(spdep)
dataIGI <- read.csv("D:/Skripsweet/data_jateng_w_latlong.csv")
rownames(dataIGI) <- dataIGI$KABUPATEN
attach(dataIGI)
vy <- IGI
vx <- dataIGI[,4:8]
coords <- cbind(x_long,y_lat)
detach(dataIGI)
tpt <- read.csv("D:/Skripsweet/Kak Along's/Matriks_TPT_inv.csv")
w_tpt <- as.matrix(tpt)
k<-dim(dataIGI)[1]-1
knn <- knearneigh(coords,k)
knn_nb <- knn2nb(knn)
dlist <- nbdists(knn_nb, coords,longlat = TRUE)
View(dlist)
View(as.matrix(dlist))
bobot1 <- nb2listw(knn_nb, glist=dlist, style="B", zero.policy=T)
View(listw2mat(bobot1))
hayo<-listw2mat(bobot1)
rownames(dataIGI$KABUPATEN)
rownames(bobot1)<-dataIGI$KABUPATEN
rownames(hayo)<-dataIGI$KABUPATEN
rownames(hayo)
colnames(hayo)<-dataIGI$KABUPATEN
View(hayo)
#MEMBUAT MATRIKS W JARAK DENGAN K TETANGGA TERDEKAT
IGI17<-readOGR("D:/Skripsweet/Shiny/Pemilihan___Matrix/data/jateng_IDI17.shp",
layer = "jateng_IDI17",
GDAL1_integer64_policy = TRUE)
#MEMBUAT MATRIKS W JARAK DENGAN K TETANGGA TERDEKAT
library(rgdal)
IGI17<-readOGR("D:/Skripsweet/Shiny/Pemilihan___Matrix/data/jateng_IDI17.shp",
layer = "jateng_IDI17",
GDAL1_integer64_policy = TRUE)
attach(IGI17)
#menentukan variabel koordinat
coords=cbind(IGI17$x_long,IGI17$y_lat)
View(coords)
koord<-coordinates(IGI17)
View(koord)
library(fields)
mycoords <- coordinates(coords)
mydm <- rdist.earth(mycoords,miles = FALSE)
for(i in 1:dim(mydm)[1]) {mydm[i,i] = 0} # diagonal nol
mydm_mat<-mat2listw(mydm)
mydmmat<-listw2mat(mydm_mat)
mydmmat_tot<-rowSums(mydmmat,na.rm = TRUE)
mydmmat<-mydmmat/mydmmat_tot
rowSums(mydmmat,na.rm = TRUE)
View(mydmmat)
View(mydm)
rownames(mycoords) <- IGI17$FIRST_KA_1
mydm <- rdist.earth(mycoords,miles = FALSE)
for(i in 1:dim(mydm)[1]) {mydm[i,i] = 0} # diagonal nol
View(mydm)
#MEMBUAT MATRIKS W JARAK
library(rgdal)
IGI17<-readOGR("D:/Skripsweet/Shiny/Pemilihan___Matrix/data/jateng_IDI17.shp",
layer = "jateng_IDI17",
GDAL1_integer64_policy = TRUE)
#menentukan variabel koordinat dari kolom tabel
coords<-cbind(IGI17$x_long,IGI17$y_lat)
#menentukan variabel koordinat dari centroid polygon
koord<-coordinates(IGI17)
library(fields)
mycoords <- coordinates(coords)
rownames(mycoords) <- IGI17$FIRST_KA_1
mydm <- rdist.earth(mycoords,miles = FALSE)
for(i in 1:dim(mydm)[1]) {mydm[i,i] = 0} # diagonal nol
View(mydm)
#row standardizing
mydmmat_tot<-rowSums(mydm,na.rm = TRUE)
mydmmat<-mydmmat/mydmmat_tot
mydmmat<-mydm/mydmmat_tot
rowSums(mydmmat,na.rm = TRUE)
View(mydmmat)
?rdist.earth
dlist <- lapply(mydm, function(x) 1/(x^2))
View(dlist)
mydm_new<-1/(mydm^2)
View(mydm_new)
View(mydm)
1/(31.78936^2)
9.895468e-04
#standardisasi baris
mydmmat_tot<-rowSums(mydm_new,na.rm = TRUE)
mydmmat<-mydm/mydmmat_tot
rowSums(mydmmat,na.rm = TRUE)
mydmmat<-mydm_new/mydmmat_tot
rowSums(mydmmat,na.rm = TRUE)
#standardisasi baris
mydmmat_tot<-rowSums(mydm_new,na.rm = TRUE)
mydmmat<-mydm_new/mydmmat_tot
rowSums(mydmmat,na.rm = TRUE)
mydmmat_tot
for(i in 1:dim(mydm_new)[1]) {mydm_new[i,i] = 0}
#standardisasi baris
mydmmat_tot<-rowSums(mydm_new,na.rm = TRUE)
mydmmat<-mydm_new/mydmmat_tot
rowSums(mydmmat,na.rm = TRUE)
View(mydmmat)
k<-dim(dataIGI)[1]-1
knn <- knearneigh(coords,k)
k<-dim(IGI17)[1]-1
k
knn <- knearneigh(coords,k)
knn_nb <- knn2nb(knn)
dlist <- nbdists(knn_nb, coords,longlat = TRUE)
indis <- function(x) 1/(x^2)
dlist <- lapply(dlist, indis)
bobot1 <- nb2listw(knn_nb, glist=dlist, style="B", zero.policy=T)
#mengembalikan ke bentuk matriks
bobot1_mat <- listw2mat(bobot1)
b_cust_tot<-rowSums(bobot1_mat,na.rm = TRUE)
bobot_custom<-bobot1_mat/b_cust_tot
rowSums(bobot_custom)
View(bobot_custom)
setwd("D:/Skripsweet/Shiny/Pemilihan___Matrix")
setwd("D:/Skripsweet/Shiny/MatrixSelection")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
conf_mat <-
structure(list(Y = c(1, 0, 0, 0, 0, 0, 0, 0, 0, 0), Score = c(0.0107176032176252,
0.00151343289438336, 0.00151343289438336, 0.00118417125401831,
0.00151343289438336, 0.00151343289438336, 0.00151343289438336,
0.00151343289438336, 0.000769538494171191, 0.0107176032176252
)), .Names = c("Y", "Score"), row.names = c(4477L, 14923L, 12792L,
49773L, 27827L, 55772L, 36056L, 51987L, 71856L, 27531L), class = "data.frame")
runApp()
runApp()
runApp()
runApp()
runApp()
migrasi <- read.csv("data/migrasi_selisih.csv")
hoho<-as.data.frame.matrix(migrasi)
View(hoho)
runApp()
runApp()
as.data.frame.matrix(migrasi)
runApp()
runApp()
runApp()
runApp()
runApp()
migrasi <- read.csv("data/migrasi_selisih.csv")
tpt <- read.csv("data/Matriks_TPT_inv.csv")
pdrb <- read.csv("data/Matriks_PDRB_Berlaku_inverse.csv")
colnames(tpt)
colnames(pdrb)
colnames(migrasi)
getwd()
runApp()
migrasi <- read.csv("data/migrasi_selisih.csv")
rownames(migrasi) <- colnames(migrasi)
View(migrasi)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(pdrb)
pdrb <- read.csv("data/Matriks_PDRB_Berlaku_inverse.csv")
rownames(pdrb) <- colnames(pdrb)
View(pdrb)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
runExample("10_download")
runApp()
runApp()
runApp()
runApp()
runApp()
